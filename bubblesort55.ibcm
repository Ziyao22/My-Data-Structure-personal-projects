C023 000          jmp       start     skip around variables
000A 001   n      dw        10         the size of the array
0009 002   a      dw        0         int a[]
0000 003   iterate  dw      0         int iterate
0000 004   element  dw      0         int element
0000 005   zero   dw        0         zero
0001 006   one    dw        1         one
4000 007   sdit   dw        4000      store it
0000 008   number dw        0          int number
0001 009   a[0] 
0002 00A   a[1]
0003 00B   a[2]   dw        0         a[2]=number
0004 00C   a[3]   dw        0         a[3]=number
0005 00D   a[4]   dw        0         a[4]=number
0006 00E   a[5]   dw        0         a[5]=number
0007 00F   a[6]   dw        0         a[6]=number
0008 010   a[7]   dw        0         a[7]=number
0009 011   a[8]   dw        0         a[8]=number
0010 012   a[9]   dw        0         a[9]=number
0011 013   a[10]  dw        0         a[10]=number
0012 014   a[11]  dw        0         a[11]=number
0013 015   a[12]  dw        0         a[12]=number
0014 016   a[13]  dw        0         a[13]=number
0015 017   a[14]  dw        0         a[14]=number
0016 018   a[15]  dw        0         a[15]=number
0017 019   a[16]  dw        0         a[16]=number
0018 01A   a[17]  dw        0         a[17]=number
0019 01B   a[18]  dw        0         a[18]=number
000A 01C   max    dw        10        max=10
0000 01D   i      dw        0         i=0     
0009 01E   j      dw        9         j=10-1
3000 01F   ldit   dw       3000            leave space for changes
0000 020   x      dw        0     counting the index
0000 021   temp   dw        0          int temp
0000 022   temp-1 dw        0          int temp-1                 
3001 023   start  load     n           if(x>=n),goto xit
6020 024          sub      x            n-x
E034 025          jmpl     xit        if n<x,end the loop
D034 026          jmpe     xit        if n=x,end the loop
3007 027          load     ldit       instruction to load a[x]
1008 028          readH               read input number
4008 029          store     number     store number to accumulator
3007 02A          load      sdit       a[iterate] 
5002 02B          add      a[]        add a to accumulator
5020 02C          add      x    add iterate to accumulator
402F 02D          store    doit       plant the instruction into program
3008 02E          load     number     load number
0000 02F   doit   dw       0            a placeholder
3020 030          load     x    load iterate to accumulator
5006 031          add      1          implement iterate by 1
4020 032          store    x    store iterate to accumulator
C023 033          jmp      start      back to the begining of the loop
301C 034          load     max           if(i>=max),goto xit
601D 035          sub      i           max-i
E062 036          jmpl     xit         if i>max,end the loop
D062 037          jmpe     xit         if max=i,end the loop
301E 038          load     j           load j to accumulator 
601D 039          sub      i           j-i
E05B 03A         jmpl     xit         if i>j
D05B 03B         jmpe     xit         if i=j
301F 03C          load     ldit        load the value
5002 03D          add      a[]         add a to accumulator
501E 03E          add      j           add j to accumulator     
4042 03F          store    doit        a[j]
6006 040          sub      one         a[i]
4044 041          store    doit        a[j-1]
0000 042   doit   dw       0            a placeholder
4021 043          store    temp        store a[j] to it     
0000 044   doit   dw        0         a placeholder for a[j-1]   
4022 045          store    temp-1       temp-1=a[j-1]
3021 046          load     temp         compare temp and temp-1
6022 047          sub      temp-1       temp-(temp-1)
E04A 048          jmpl     xit          if temp>(temp-1),end
C057 049          jmp      xit          if temp=(temp-1),end
3007 04A          load     sdit         let temp-1=a[j]     
5002 04B          add      a[]          add a to accumulator
501E 04C          add      j            add j to accumulator
404F 04D          store    doit         a[j]
3022 04E         load     temp-1       load temp-1
0000 04F   doit   dw       0            a placeholder
3007 050          load     sdit         let temp=a[j-1]
5002 051          add      a[]          add a to accumulator
501E 052          add      j            add j to accumulator
6006 053          sub      1          j-1
4056 054          store    doit         a[j-1]
3021 055          load     temp         load temp
0000 056   doit   dw       0             another placeholder
301E 057          load     j             load j to accumulator
6006 058          sub      1           j-=1            
401E 059          store    j             store j to accumulator
C038 05A          jmp      start         back to the begining of the loop
301D 05B          load      i            
5006 05C          add       1         implement i by one
401D 05D          store     i            store i to accumulator
301C 05E          load      max           load max
6006 05F          sub       1           max=max-1
401E 060          store     j             store j to accumulator
C034 061          jmp      start         back to the begining of the loop
3001 062          load     n         load n to accumulator
6003 063          sub      iterate        n-iterate
E075 064          jmpl     xit        if n>iterate,end the loop
D075 065          jmpe     xit        if n=iterate,end the loop
301F 066          load     ldit       instruction to load a[iterate]
5002 067          add      a[]          add a to accumulator
5003 068          add      iterate      add iterate to accumulator
406A 069          store    doit     plant the instruction into       
0000 06A   doit   dw       0              a placeholder
4004 06B          store    element     store the element to accumulator
3004 06C          load     element      load the element to accumulator
1800 06D          printH   element      output the value of the array
3003 06E          load     iterate      load iterate to the accumulator
5006 06F          add      1             iterate+=1
4003 070          store    iterate       store iterate to accumulator
C062 071          jmp      start       back to the begining of the loop
0000 072          halt                 finish
